
# Permutations Using Backtracking

This repository demonstrates how to generate all permutations of a list of distinct integers using a backtracking approach. The solution is implemented in Python within a class `Solution` with a method `permute`.

## Code Explanation

### Imports and Class Definition

```python
from typing import List
```

- `from typing import List`: Importing List from the typing module for type hinting.

```python
class Solution:
```

- `class Solution`: Defines a class `Solution` encapsulating the method for generating permutations.

### Method `permute`

```python
def permute(self, nums: List[int]) -> List[List[int]]:
```

- `def permute(self, nums: List[int]) -> List[List[int]]`: Method to generate all permutations of `nums` and return them as a list of lists.

### Backtracking Function `backtrack`

```python
def backtrack(curr_permutation):
    if len(curr_permutation) == len(nums):
        permutations.append(curr_permutation[:])  # Add a copy of permutation to results
        return
    for num in nums:
        if num not in curr_permutation:
            curr_permutation.append(num)
            backtrack(curr_permutation)
            curr_permutation.pop()
```

- `def backtrack(curr_permutation)`: Recursive function to explore permutations.
- `if len(curr_permutation) == len(nums)`: Base case to add complete permutations to `permutations`.
- `permutations.append(curr_permutation[:])`: Adds a copy of `curr_permutation` to `permutations`.
- `for num in nums`: Iterates through numbers to explore permutation choices.
- `if num not in curr_permutation`: Ensures each number is used only once in permutations.
- `curr_permutation.append(num)`: Adds `num` to `curr_permutation`.
- `backtrack(curr_permutation)`: Recursively explores permutations.
- `curr_permutation.pop()`: Backtracks by removing the last added element.

### Initialization and Return

```python
permutations = []
backtrack([])
return permutations
```

- `permutations = []`: Initializes list to store permutations.
- `backtrack([])`: Starts permutation generation.
- `return permutations`: Returns list of all permutations.

## Algorithmic Thinking

- **Backtracking Approach**: Recursive strategy to explore all permutations by making and undoing choices.
- **Uniqueness**: Ensures each number is used only once in permutations to maintain uniqueness.
- **Result Storage**: Copies of valid permutations are stored in `permutations` to maintain independent results.
- **Efficiency**: Efficient generation of permutations despite recursion due to careful state management.

## Example Usage

Here's how you can use the `Solution` class to generate permutations:

```python
# Example usage of the Solution class
solution = Solution()
nums = [1, 2, 3]
print(solution.permute(nums))
```

This will output all the permutations of the list `[1, 2, 3]`.
